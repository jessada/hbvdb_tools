#!perl -T 

#***************************************************************************************************************************
#
# Purpose  : To check the functinality of bvd-get.pl for production site
# Note     : 
#  - Please handle this script with care since it is likely to destroy the default database because the 'database' directory
#    for this testing will be the default database, 'DB', in <hbvdb-tools/bin> directory
#  - The cases and naming convention can be splitted into  levels
#    - The first level indicate the major change or major features
#    - The second and third level are designed to facilatate the test. They will be used to categorize the case into
#      group and sub-group
#    - The forth level is the running number of cases in one sub group
#    - The last level is designed so that the tests with the same description can be run several times with diffrent
#      input 
#
#***************************************************************************************************************************

use 5.006;
use strict;
use warnings;
use Test::More;

use Cwd 'abs_path';
use File::Basename;

use Bvdb_test qw(clear_db untaint get_absolute_db_dir compare_file);

my @test_args;
my $absolute_bvd_add_path = untaint(dirname(abs_path($0))."/../bin/bvd-add.pl"); 
my $absolute_bvd_get_path = untaint(dirname(abs_path($0))."/../bin/bvd-get.pl"); 
my $absolute_perl_path    = untaint($^X);
my $absolute_script_dir   = untaint(dirname(abs_path($0))); 

my $absolute_test_DB_dir;
my $absolute_test_data_dir;

my %correct_authen = ();
$correct_authen{home_dir} = '/home/jessada';

=head1 NAME

F<01-dev-unit-test-bvd-get.case>

=head1 PURPOSE

To check the functinality of bvd-get.pl in development environment

=head1 NOTE1

Please handle this script with care since it is likely to destroy the default database because the 'database' directory for this testing will be the default database, 'DB', in <hbvdb-tools/bin> directory.

=head1 NOTE2

The naming convention of cases and related files can be splitted into 5 levels (This naming convention is not related to version number)

=over 4

=item * The first level indicate the major change or major features

=item * The second and third level are designed to facilatate the test. They will be used to categorize the case into group and sub-group

=item * The forth level is the running number of cases in one sub group
  
=item * The last level is designed so that the tests with the same description can be run several times with diffrent input (retest) 

=back

=head1 CASES group bvd-get.1.x.x.x - The first release

***************************************************************************************************************************

                                              F  I  R  S  T      R  E  L  E  A  S  E   

***************************************************************************************************************************

=head2 cases subgroup bvd-get.1.1.1.x

The purpose of the cases in this group is to work with the simulated normal operation (bvd-add then bvd-get) at the default database

    case bvd-get.1.1.1.1 :
	bvd-get work correctly under the simulated normal operation (bvd-add then bvd-get) at the default database.

=cut

sub case_bvd_get_1_1_1_1_1 {

    subtest "case bvd-get.1.1.1.1.1 - bvd-get work correctly under the simulated normal operation (bvd-add then bvd-get) at the default database" => sub {

	$absolute_test_DB_dir   = untaint(get_absolute_db_dir(%correct_authen));
	$absolute_test_data_dir = "$absolute_script_dir/test_data/bvd_get/1.1.1.1.1";

	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.1.1.1_2.vcf";
	push @test_args, "-T";
	push @test_args, "colon_cancer";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.1.1.1_1.vcf";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.1.1.1_4.vcf";
	push @test_args, "-T";
	push @test_args, "lung_cancer,colon_cancer";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.1.1.1_3.vcf";
	push @test_args, "-T";
	push @test_args, "colon_cancer,lung_cancer";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.1.1.1_5.vcf";
	push @test_args, "-T";
	push @test_args, "lung_cancer";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);

	@test_args = ();
	open(STDOUT, ">$absolute_test_DB_dir/bvd_get_out");
	push @test_args, "-T";
	push @test_args, "colon_cancer";
	system($absolute_perl_path, $absolute_bvd_get_path, @test_args);
	compare_file(got => "$absolute_test_DB_dir/bvd_get_out", expected => "$absolute_test_data_dir/expected_result", test_description => "avdb output is correct");
	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);

	done_testing();
    };
}

case_bvd_get_1_1_1_1_1();


sub dont_forget {
    my ($msg) = @_;
    fail("$msg");
}

TODO: {
    local $TODO = "Here you go";

    dont_forget("migrate script from the past");

}


done_testing();

