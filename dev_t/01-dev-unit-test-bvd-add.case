#!perl -T 

#***************************************************************************************************************************
#
# Purpose  : To check the functinality of bvd-add.pl for production site
# Note     : 
#  - Please handle this script with care since it is likely to destroy the default database because the 'database' directory
#    for this testing will be the default database, 'DB', in <hbvdb-tools/bin> directory
#  - The cases and naming convention can be splitted into  levels
#    - The first level indicate the major change or major features
#    - The second and third level are designed to facilatate the test. They will be used to categorize the case into
#      group and sub-group
#    - The forth level is the running number of cases in one sub group
#    - The last level is designed so that the tests with the same description can be run several times with diffrent
#      input 
#
#***************************************************************************************************************************

use 5.006;
use strict;
use warnings;
use Test::More;

use Cwd 'abs_path';
use File::Basename;
use File::Path qw(mkpath);
use File::Copy;

use Bvdb_test qw(clear_db untaint get_absolute_db_dir compare_file compare_file_content compare_file_header file_header_exist);

my @test_args;
my $absolute_bvd_add_path = untaint(dirname(abs_path($0))."/../bin/bvd-add.pl"); 
my $absolute_perl_path    = untaint($^X);
my $absolute_script_dir   = untaint(dirname(abs_path($0))); 

my $absolute_test_DB_dir;
my $absolute_test_data_dir;
my $source_bvdb;
my $source_chksum;
my $target_bvdb;
my $target_chksum;

my %correct_authen = ();
$correct_authen{home_dir} = '/home/jessada';

=head1 NAME

F<01-dev-unit-test-bvd-add.case>

=head1 PURPOSE

To check the functinality of bvd-add.pl in development environment

=head1 NOTE1

Please handle this script with care since it is likely to destroy the default database because the 'database' directory for this testing will be the default database, 'DB', in <hbvdb-tools/bin> directory.

=head1 NOTE2

The naming convention of cases and related files can be splitted into 5 levels (This naming convention is not related to version number)

=over 4

=item * The first level indicate the major change or major features

=item * The second and third level are designed to facilatate the test. They will be used to categorize the case into group and sub-group

=item * The forth level is the running number of cases in one sub group
  
=item * The last level is designed so that the tests with the same description can be run several times with diffrent input (retest) 

=back

=head1 CASES group bvd-add.1.x.x.x - The first release

***************************************************************************************************************************

                                              F  I  R  S  T      R  E  L  E  A  S  E   

***************************************************************************************************************************

=head2 cases subgroup bvd-add.1.1.1.x

The purpose of the cases in this group is to check if bvd-add can build default database from scratch

    case bvd-add.1.1.1.1 :
	bvd-add can build default database from scratch using random variant from 200danes (without options -T)

=cut

sub case_bvd_add_1_1_1_1_1 {

    subtest "case bvd-add.1.1.1.1.1 - bvd-add can build default database from scratch using random variant from 200danes (without options -T)" => sub {

	$absolute_test_DB_dir   = get_absolute_db_dir(%correct_authen);
	$absolute_test_data_dir = "$absolute_script_dir/test_data/bvd_add/1.1.1.1.1";

	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.1.1.1_1.vcf";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "NI", test_description => "NI header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "ENTRIES", test_description => "ENTRIES header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "TAGS", test_description => "TAGS header is correct");
	compare_file_content(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", test_description => "file content is correct");
	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);

	done_testing();
    };
}

=pod

    case bvd-add.1.1.1.2 :
	bvd-add can build default database from scratch using random variant from 200danes (with options -T)

=cut

sub case_bvd_add_1_1_1_2_1 {

    subtest "case bvd-add.1.1.1.2.1 - bvd-add can build default database from scratch using random variant from 200danes (with options -T)" => sub {

	$absolute_test_DB_dir   = get_absolute_db_dir(%correct_authen);
	$absolute_test_data_dir = "$absolute_script_dir/test_data/bvd_add/1.1.1.2.1";

	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.1.2.1_1.vcf";
	push @test_args, "-T";
	push @test_args, "colon_cancer,lung_cancer";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "NI", test_description => "NI header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "ENTRIES", test_description => "ENTRIES header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "TAGS", test_description => "TAGS header is correct");
	compare_file_content(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", test_description => "file content is correct");
	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);

	done_testing();
    };
}

=head2 cases subgroup bvd-add.1.1.2.x

The purpose of the cases in this group is to check if bvd-add can handle the insertion of variant frequencies into existing default database

    case bvd-add.1.1.2.1 :
	bvd-add can handle the insertion of variant frequencies without tags into the default database without tags

=cut

sub case_bvd_add_1_1_2_1_1 {

    subtest "case bvd-add.1.1.2.1.1 - bvd-add can handle the insertion of variant frequencies without tags into the default database that doesn't have tags" => sub {

	$absolute_test_DB_dir   = untaint(get_absolute_db_dir(%correct_authen));
	$absolute_test_data_dir = untaint("$absolute_script_dir/test_data/bvd_add/1.1.2.1.1");

	$source_bvdb   = "$absolute_test_data_dir/1.1.2.1.1_bvdb";
	$source_chksum = "$absolute_test_data_dir/1.1.2.1.1_bvdb_chksum"; 

	$target_bvdb   = "$absolute_test_DB_dir/bvdb";
	$target_chksum = "$absolute_test_DB_dir/bvdb_chksum";

	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);
	mkpath $absolute_test_DB_dir;
	copy($source_bvdb, $target_bvdb) or die "Cannot copy $source_bvdb to $target_bvdb\n";
	copy($source_chksum, $target_chksum) or die "Cannot copy $source_chksum to $target_chksum\n";
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.2.1.1_1.vcf";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "NI", test_description => "NI header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "ENTRIES", test_description => "ENTRIES header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "TAGS", test_description => "TAGS header is correct");
	compare_file_content(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", test_description => "file content is correct");
	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);

	done_testing();
    };
}

=pod

    case bvd-add.1.1.2.2 :
	bvd-add can handle the insertion of variant frequencies with tags into the default database without tags

=cut

sub case_bvd_add_1_1_2_2_1 {

    subtest "case bvd-add.1.1.2.2.1 - bvd-add can handle the insertion of variant frequencies with tags into the default database that doesn't have tags" => sub {

	$absolute_test_DB_dir   = untaint(get_absolute_db_dir(%correct_authen));
	$absolute_test_data_dir = untaint("$absolute_script_dir/test_data/bvd_add/1.1.2.2.1");

	$source_bvdb   = "$absolute_test_data_dir/1.1.2.2.1_bvdb";
	$source_chksum = "$absolute_test_data_dir/1.1.2.2.1_bvdb_chksum"; 

	$target_bvdb   = "$absolute_test_DB_dir/bvdb";
	$target_chksum = "$absolute_test_DB_dir/bvdb_chksum";

	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);
	mkpath $absolute_test_DB_dir;
	copy($source_bvdb, $target_bvdb) or die "Cannot copy $source_bvdb to $target_bvdb\n";
	copy($source_chksum, $target_chksum) or die "Cannot copy $source_chksum to $target_chksum\n";
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.2.2.1_1.vcf";
	push @test_args, "--tags";
	push @test_args, "lung_cancer";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "NI", test_description => "NI header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "ENTRIES", test_description => "ENTRIES header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "TAGS", test_description => "TAGS header is correct");
	compare_file_content(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", test_description => "file content is correct");
	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);

	done_testing();
    };
}

=pod

    case bvd-add.1.1.2.3 :
	bvd-add can handle the insertion of variant frequencies without tags into the default database with tags

=cut

sub case_bvd_add_1_1_2_3_1 {

    subtest "case bvd-add.1.1.2.3.1 - bvd-add can handle the insertion of variant frequencies without tags into the default database that has tags" => sub {

	$absolute_test_DB_dir   = untaint(get_absolute_db_dir(%correct_authen));
	$absolute_test_data_dir = untaint("$absolute_script_dir/test_data/bvd_add/1.1.2.3.1");

	$source_bvdb   = "$absolute_test_data_dir/1.1.2.3.1_bvdb";
	$source_chksum = "$absolute_test_data_dir/1.1.2.3.1_bvdb_chksum"; 

	$target_bvdb   = "$absolute_test_DB_dir/bvdb";
	$target_chksum = "$absolute_test_DB_dir/bvdb_chksum";

	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);
	mkpath $absolute_test_DB_dir;
	copy($source_bvdb, $target_bvdb) or die "Cannot copy $source_bvdb to $target_bvdb\n";
	copy($source_chksum, $target_chksum) or die "Cannot copy $source_chksum to $target_chksum\n";
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.2.3.1_1.vcf";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "NI", test_description => "NI header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "ENTRIES", test_description => "ENTRIES header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "TAGS", test_description => "TAGS header is correct");
	compare_file_content(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", test_description => "file content is correct");
	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);

	done_testing();
    };
}

=pod

    case bvd-add.1.1.2.4 :
	bvd-add can handle the insertion of variant frequencies with tags into the default database with tags

=cut

sub case_bvd_add_1_1_2_4_1 {

    subtest "case bvd-add.1.1.2.4.1 - bvd-add can handle the insertion of variant frequencies with tags into the default database that has tags" => sub {

	$absolute_test_DB_dir   = untaint(get_absolute_db_dir(%correct_authen));
	$absolute_test_data_dir = untaint("$absolute_script_dir/test_data/bvd_add/1.1.2.4.1");

	$source_bvdb   = "$absolute_test_data_dir/1.1.2.4.1_bvdb";
	$source_chksum = "$absolute_test_data_dir/1.1.2.4.1_bvdb_chksum"; 

	$target_bvdb   = "$absolute_test_DB_dir/bvdb";
	$target_chksum = "$absolute_test_DB_dir/bvdb_chksum";

	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);
	mkpath $absolute_test_DB_dir;
	copy($source_bvdb, $target_bvdb) or die "Cannot copy $source_bvdb to $target_bvdb\n";
	copy($source_chksum, $target_chksum) or die "Cannot copy $source_chksum to $target_chksum\n";
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.2.4.1_1.vcf";
	push @test_args, "--tags";
	push @test_args, "lung_cancer";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "NI", test_description => "NI header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "ENTRIES", test_description => "ENTRIES header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "TAGS", test_description => "TAGS header is correct");
	compare_file_content(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", test_description => "file content is correct");
	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);

	done_testing();
    };
}

=head2 cases subgroup bvd-add.1.1.7.x

The purpose of the cases in this group is to see if backup option (-s/--savediskspace) are working correctly

    case bvd-add.1.1.7.1 :
	Without option -s/--savediskspace, bvd-add must do the backup for both database content and chksum correctly in default database.

=cut

sub case_bvd_add_1_1_7_1_1 {

    subtest "case bvd-add.1.1.7.1.1 - Without option -s/--savediskspace, bvd-add correctly do the backup for both database content and chksum in default database" => sub {

	$absolute_test_DB_dir   = untaint(get_absolute_db_dir(%correct_authen));
	$absolute_test_data_dir = untaint("$absolute_script_dir/test_data/bvd_add/1.1.7.1.1");

	$source_bvdb   = "$absolute_test_data_dir/1.1.7.1.1_bvdb";
	$source_chksum = "$absolute_test_data_dir/1.1.7.1.1_bvdb_chksum"; 

	$target_bvdb   = "$absolute_test_DB_dir/bvdb";
	$target_chksum = "$absolute_test_DB_dir/bvdb_chksum";

	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);
	mkpath $absolute_test_DB_dir;
	copy($source_bvdb, $target_bvdb) or die "Cannot copy $source_bvdb to $target_bvdb\n";
	copy($source_chksum, $target_chksum) or die "Cannot copy $source_chksum to $target_chksum\n";
	@test_args = ();
	push @test_args, "$absolute_test_data_dir/1.1.7.1.1_1.vcf";
	system($absolute_perl_path, $absolute_bvd_add_path, @test_args);

	my $DB_backup_file = `/bin/ls $absolute_test_DB_dir/bvdb2* | /usr/bin/sort -r | /usr/bin/head -1`;
	my $chksum_backup_file = `/bin/ls $absolute_test_DB_dir/bvdb_chksum2* | /usr/bin/sort -r | /usr/bin/head -1`;
        chomp($DB_backup_file);
        chomp($chksum_backup_file);
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "NI", test_description => "NI header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "ENTRIES", test_description => "ENTRIES header is correct");
	compare_file_header(got => "$absolute_test_DB_dir/bvdb", expected => "$absolute_test_data_dir/expected_result", header => "TAGS", test_description => "TAGS header is correct");
	compare_file(got => "$DB_backup_file", expected => "$absolute_test_data_dir/expected_bvdb_backup", test_description => "database backup is correctly done");
	compare_file(got => "$chksum_backup_file", expected => "$absolute_test_data_dir/expected_bvdb_chksum_backup", test_description => "chksum backup is correctly done");
	clear_db(db_dir => $absolute_test_DB_dir, %correct_authen);

	done_testing();
    };
}

case_bvd_add_1_1_1_1_1();
case_bvd_add_1_1_1_2_1();
case_bvd_add_1_1_2_1_1();
case_bvd_add_1_1_2_2_1();
case_bvd_add_1_1_2_3_1();
case_bvd_add_1_1_2_4_1();
case_bvd_add_1_1_7_1_1();


sub dont_forget {
    my ($msg) = @_;
    fail("$msg");
}

TODO: {
    local $TODO = "Here you go";

    dont_forget("handle pipe input");
    dont_forget("handle process substitution");
    dont_forget("handle wild card input?");

}


done_testing();

